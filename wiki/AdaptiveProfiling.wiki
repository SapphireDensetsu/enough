#summary Adaptive Profiling definition and applications

_this sections needs better examples_

= Summary =
Adaptive profiling is the ability of a system to change dynamically in a way that improves it's performance. This is made possible by BuzzWords such as Capabilities and OrthogonalPersistence.

= Background: Clients and Servers =
In many applications there are two distinct entities: a client and a server. The client usually contains less: less code or less data or both. The server controls a central codebase or database which it "serves" to it's clients, or simply performs that task of coordinating between many clients. This division can be created to improve system performance, sometimes by running servers and clients on different machines. For example, if the application requires a large database, the client can be lightweight because the server will take care of the database. Or, if many users are collaborating, in some cases a central server can improve the communication performance. 

== Limitations of static systems ==

These systems are *static*. This means that once you decide on the roles of the server and client, once you implement them, it is not possible to change these roles. If you have installed a server on one machine and a client on another, the system will always work this way. This seems obvious, but without this restriction new features are possible.

== Example ==
The server holds a database. It resides on a dedicated machine. The clients run on other machines, and access the server via a network. If a client wants some information from the database, it requests it from the server. Every such request has networking overhead, but the assumption is that the database is so heavy and that requests are so sparse that it is better to put the database on a separate machine.

If the database is actually not so big, and maybe clients' requests are more common, the networking overhead can be the main performance hit. It would have been better perhaps to distribute the database completely to each user whenever it changes. This means that a completely different protocol should be implemented. 


= Dynamic systems - adaptive profiling =

With adaptive profiling, the problem in the previous example can be solved. 

The system continuously monitors the performance of certain actions: how long it takes to send/receive a request, how long does it take to search for an entry in the database, etc. 

If a the network overhead of sending a request costs more than searching the database, the conclusion is that it may be better to place the database on the client. An adaptive profiling system may simply _move_ the database to the client's side of the network. This moving does not have to be implemented anew for each database. With capability and orthogonal persistent systems, the database is an object in memory. It can be sent securely to the client. 

_expand this section!_