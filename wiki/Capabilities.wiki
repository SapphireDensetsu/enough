#summary Definition and applications

= What are Capability Systems? =

Wikipedia seems to have a good entry: [http://en.wikipedia.org/wiki/Capabilities]

= Mainstream security =
The mainstream in security these days is using ACLs to validate access to objects.
[WhyACLsAreBad ACLs are a bad way to implement security].

= Security via Capabilities =
Capability systems are systems in which an object can not perform operations on other objects without the proper "capability". This capability can be described as a reference. If you don't have a reference to an object, you can't do anything with that object.

With capabilities, no "security permission checks" are necessary. If you don't explicitly give the application references to internet connections and your secret documents, they can't even _express requests_ to operate on them.

= Unification of designation and authority =
In today's world, objects are designated by programs via resource identifiers, which are overt and forgeable. A program designates an object, and the operating system verifies that access is allowed against the ACL.  With capabilities, the only way to designate an object is via a capability. A capability also represents the authority to access that object. Thus, the designation of an object and the authority to access that object are united into one artifact: The capability.  This way, a program only contains a list of objects it can access, without any reverse list to verify it.
The consequences are:
  * A simpler system that contains only designation, without extra mechanisms for verifying authority.
  * A more powerful system that allows fine-grained control over which piece of code can access what objects.
  * [NetworkReferences A natural way to extend this on to a network].

= Limited access to objects via capabilities =
Capabilities also allow control of permissions with much finer granularity. One of these control methods are called _facets_. A facet is a proxy to an object, that only allows a subset of the functionality. Instead of giving a capability to an object, one can give a capability to a facet. The facet may later be nullified to revoke the capability, or the permissions may be changed dynamically.
This allows any object holder to create a capability to a limited-subset of the object, without requiring any secure code in the operating system to be written for those specific restrictions.

For more on capability patterns, see [http://wiki.erights.org/wiki/Walnut/Secure_Distributed_Computing/Capability_Patterns E in a walnut - Capability Patterns]

== Primary references ==
See the [http://code.google.com/p/enough/ main project page] for more.
 * [http://www.erights.org/talks/thesis/index.html Robust Composition]: Towards a Unified Approach to Access Control and Concurrency Control, dissertation by Mark Samuel Miller, Johns Hopkins University, May 2006
 * [http://wiki.erights.org/wiki/Walnut E in a Walnut] by Marc Stiegler