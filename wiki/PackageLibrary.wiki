#summary A library for enough projects
#labels InProgress

= Outline =
The current design is the result of our current livec/graphui implementation efforts, where we learned important lessons.

 * *Purpose:* to allow development of enough projects (e.g. LiveC, Graphui) using a design based on ideas in Enough.
 * *Design:* Currently, the library's design reflects:
   * [DifferentialComputing Differential computing] using deltas and observation
   * [LazyEvaluation Lazy Evaluation] using "expression objects"
   * [ObjectRevisionControl Object-based revision control] using deltas, histories, and hierarchical baselines. 
   * [RetroactiveMacros Retroactive macros] made possible by history recording and visualization.

 * *Future features* that will become possible after we complete this phase:
   * [MemoryManagement Intelligent memory management (recomputability)]: Deciding which objects should be cached (in-memory), swapped (cached in disk), or discarded (recomputed when necessary) according to the computation costs, storage costs, access frequency and importance. This requires developing some algorithms...
   * [OrthogonalPersistence Orthogonal persistence] (or a variant thereof): Transparent swapping of unused objects to disk (due to current LCW implementation, objects will be serialized to files).

= Glossary =

 * *Observable*: an object that sends notifications. A single object can have multiple "observation ports". A typical observation pattern is typically used by mutable objects to send notifications to observers about mutations. Some examples of observable mutable objects:
    * `List` (notifies when items are added, removed or replaced)
    * `Dict` (notifies when keys are added, removed or a value is replaced)
    * `ValuePtr` (notifies when the ptr is changed to point at another object)

 * *Observer*: an entity that is registered to receive notifications about changes in an observable object. 

 * *Value*: an entity that holds a piece of data that can be accessed in any way (read, sliced, etc). Examples: `List`, `Dict`, `ValuePtr`.

 * *Expression*: represents computations on inputs (inputs are other expressions). Expressions are "light" objects that do not cost a lot of memory, and represent the necessary computation required to create the value that they represent. 

 * *Literal*: A literal is a special kind of expression that contains a mutable value. It does not have inputs but allows changes to take place directly on the value via a special interface.  Only literal expressions are actually mutable, and are not redundant to their inputs.

 * *Delta*: represents a change in a class of objects (e.g. `ListItemAdd` represents the adding of an item to a List). Deltas do not refer to a specific object that has changed - they only represent the change that can be applied to an object. Each object type (`List`, `Dict`, etc.) has its own set of delta classes specific to that type. A delta is always reversible. This means that some deltas hold more information than is necessary to just perform the change, but also information required to reverse it (e.g DictItemReplace also holds the previous value).  Deltas are also combinable via "delta arithmetic".

 * *Delta arithmetic*: Deltas can be combined in various ways. `a + b` is a "combined delta" of a and b, that is equivalent to applying a and then applying b. `-a` is the reverse of a (applying `a` and then `-a` yields no change). `-((-b)+(-a))` is equivalent to (a+b).

 * *Notifications* of observable mutable objects are actually deltas. Mutations are always done via deltas, and the delta is sent to observers.

 * *Merges*: TODO.


= Details =

== Expressions ==

Expression represent and evaluate to an "output value".

=== Non-literal expressions ===

Expressions that are not literals have certain properties:

* They are not themselves mutable, but they are observable for mutations in their value.
* They are always redundant to their inputs.
   * When expressions are observed, they observe their inputs, so that when the input has changed, it may notify its own observers of changes.
   * An expression may have no input (see `Literal` below).
   * Normally, an expression doesn't store the result of its operation. It calculates the result lazily (see _Open/Close_, below). Storing the result is called _caching_, and in principal this can be done "intelligently", considering performance tradeoffs, resources, etc.
   * Some example expressions are:
     * `Literal` - the expression that simply represents a value
     * `DictMap` - *TODO*
     * `WithDelta` - see _revision control_, below.

== Layer 1: Observable objects with deltas and expressions ==

=== Motivation for Observation ===
It might seem that observation is a by-product of the mutability of some base objects (such as `List`). Can we do without observation, and only use deltas on immutable objects? The answer is no. The main reason is that expressions need to know if their inputs changed. Otherwise, an expression will have to re-calculate itself every time somebody tries to use its value. Also, however uses its value, does not know if that value has changed a moment later, it has to keep checking.

=== Open/Close of Observables ===
*TODO*

=== Propogation of changes ===
*TODO*

=== Example ===
*TODO*

== Layer 2: Revision control ==
Since all changes in layer 1 are represented by deltas and expressions on which they occur, the revision control can understand not only _how the change looks_ but also _what the change was_. For further discussion see [ObjectRevisionControl Object-based revision control].

Definitions:
 * `WithDelta` - an *expression* that takes (expression, delta) and represents the given expression with the delta applied. `WithDelta` does not actually _apply_ the delta, it only _represents_ the combination: value+change. The given expression can be thought of as a "base revision" and the `WithDelta` object as a "new revision" which is equal to "base revision" + delta.

*TODO* Define: revision, revision getter, history, baseline.