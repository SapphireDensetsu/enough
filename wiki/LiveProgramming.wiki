#summary Programming with live code instead of text

== Main references ==
 # Ferdinand de Saussure (1916). _The Course of General Linguistics (Cours de linguistique générale)_
 # _[http://en.wikipedia.org/w/index.php?title=Semantics&oldid=107257033 Semantics]_ in Wikipedia
 # _[http://alarmingdevelopment.org/?p=5 Manifesto of the Programmer Liberation Front]_ Jonathan Edwards (June 16, 2004)

=== Additional resources ===
 * [http://www.alice.org Alice], for an interesting demo watch the first one on this page: http://www.alice.org/Alice_movies/
 * [http://www.ni.com/labview/ LabView], a tool for "virtual instrumentation", including an graphical interface for "block programming" by connecting outputs to inputs. See the [http://www.ni.com/labview/demos.htm Demos]

= Introduction =
Before we start, it is recommended to read about [SyntaxAndSemantics Syntax and Semantics].

== Problems with syntax ==
The external relation between syntax and meaning has a price. There are several limitations and problems.

=== Syntax that is hard to read/use ===
In some languages (such as written French and Perl) the syntax often causes frustration. In French, the syntactical expression of single words (spelling) is very hard to learn for a newcomer. So is the French syntactical representation of decimal numbers. In Perl, the problem is that the syntax allows to many different ways to specify a single meaning. Of course one can write completely comprehensible programs in perl. But perl allows otherwise, and soon enough this happens, either intentionally (which is ok, because that's what the author wants. See the [http://www.perlmonks.org/index.pl?node_id=45213 Perl Camel] by [http://www.Erudil.com Stephen B. Jenkins]) or because the programmer doesn't value readability (the much more common and very bad case).

Syntax can also lead to errors or simple waste time. In C a very common error is caused by the "switch case" syntax (if you omit a break statement in a case, all the proceeding statements are executed). A time-wasting example in C is forgetting a semicolon after a struct in one header file and receiving many errors in another unrelated file.

=== Syntax that doesn't express the semantics naturally ===
An different problem has deeper implications. Sometimes the syntax imposes restrictions that the semantics don't, causing us to think of things in a more restricted way. A language with this problem is not a good language. We define both syntax _and_ semantics as part of the language, and expect them to match. If they don't, we're in trouble. Usually this doesn't happen.

== Textual syntax and its limitations ==
Most programming languages have a textual syntax. The programmer produces a text file containing the source code, and uses a compiler or interpreter to transform this text into code that can run. Any syntactical mistake in the text file may lead to _compilation errors_. Thus, the programmer is forced to waste time on "arguing" with the compiler about what he meant (and unfortunately the compiler is always right).

A worse case is when a syntax error causes a change in the _semantic_ meaning of the program. Here, the program compiles and to the programmer everything looks fine. Only later (if at all) will he discover that the program is not what he meant it to be, and all because of a typing mistake. For a 