#summary Definition and applications

= What is Orthogonal Persistence? =

== Seperated Storage ==
Most operating systems have a concept of File Systems. Every process that wishes to store information persistently must use the OS's system calls to create a file on a persistent storage media (e.g. hard drive). The task of storing data on disk is seperated from storing data in memory such as RAM. For this reason, we refer to this method as "Seperated storage".

== Problems with Seperated Storage ==

_This section should be expanded with more convincing arguments_

Take the common text editor (such as notepad) as an example. You edit the text file in the window of the application. That is, you enter data. The data is there. In many cases you will want to "save" it. But for the programmer of the notepad application, this is a "hassle" - he (or she) needs to explicitly open a file on the disk, write the data, and close the file. If you modify the text and want to save the new version, the program must yet again open a file, etc.

For a more complex application, such as a full-fledged word processor, the data is not a simple string of text. It exists in memory in a complex set of structures, probably containing structures such as lists that require pointers. The situation gets worse for applications that want to continously "persist" their data. They may use OS features such as memory mapping, but this puts another overhead to a very basic programming goal - *NOT LOSING YOUR DATA!*

== Solution(s)? ==
_Currently the only solution presented is Orthogonal Persistence. Expand._

*Orthogonal Persistence* is an alternative to storing data in process-managed files. _Orthogonal_ in this case means that there is always persistence. The idea is to let the operating system take care of persistence instead of having each process manage data that needs to be saved. 
The following is an outline of one possible way to achieve orthogonal persistence:
 * Every application stores it's data in memory, always, and never has to access files.
 * Once in a (short) while, the operating system has a "checkpoint" where all the memory is stored on disk.
 * The checkpoints are performed in an incremental manner: only portions (pages) of memory that have been modified need to be saved to disk.
 * Special algorithms make this operation efficient.

= Problems with Orthgonal Persistence =
_Missing. Expand..._

= Additional Information & References =
_Put some more references, find publications on Orthogonal Persistence_

[http://en.wikipedia.org/wiki/Orthogonal_persistence Orthogonal Persistence on WikiPedia]
